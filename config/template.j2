/**
 * @file
 * Defines default strategy parameter values for the given timeframe.
 */

// Defines indicator's parameter values for the given pair symbol and timeframe.
struct Indi_RVI_Params_{{ Timeframe }} : Indi_RVI_Params {
  Indi_RVI_Params_{{ Timeframe }}() : Indi_RVI_Params(indi_rvi_defaults, PERIOD_{{ Timeframe }}) {
    applied_price = (ENUM_APPLIED_PRICE){{ RVI_Indi_RVI_Applied_Price | default(0) }};
    ma_method = {{ RVI_Indi_RVI_MA_Method | default(0) }};
    period = {{ RVI_Indi_RVI_Period | default(0) }};
    shift = {{ RVI_Shift | default(0) }};
  }
} indi_rvi_{{ Timeframe | lower }};

// Defines strategy's parameter values for the given pair symbol and timeframe.
struct Stg_RVI_Params_{{ Timeframe }} : StgParams {
  // Struct constructor.
  Stg_RVI_Params_{{ Timeframe }}() : StgParams(stg_rvi_defaults) {
    lot_size = {{ RVI_LotSize | default(0) }};
    signal_open_method = {{ RVI_SignalOpenMethod | default(0) }};
    signal_open_filter = {{ RVI_SignalOpenFilterMethod | default(1) }};
    signal_open_level = (float){{ RVI_SignalOpenLevel | default(0) }};
    signal_open_boost = {{ RVI_SignalOpenBoostMethod | default(0) }};
    signal_close_method = {{ RVI_SignalCloseMethod | default(0) }};
    signal_close_level = (float){{ RVI_SignalCloseLevel | default(0) }};
    price_stop_method = {{ RVI_PriceStopMethod | default(0) }};
    price_stop_level = {{ RVI_SignalCloseLevel | default(1) }};
    tick_filter_method = {{ RVI_TickFilterMethod  | default(1) }};
    max_spread = {{ RVI_MaxSpread | default(0) }};
  }
} stg_rvi_{{ Timeframe | lower }};
